<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mycode.jxzlpj.jiaoxuepingjia.xspj.mapper.XspjMapper">

    <select id="getPageList" resultType="com.mycode.jxzlpj.jiaoxuepingjia.xspj.domain.Xspj">
        <choose>
            <when test="accountType == 'student'">
                SELECT T2.COURSE_CODE, T2.COURSE_NAME, T2.COURSE_ATTR, T2.SK_SJ,T2.SK_DD
                , T4.USER_ID "teacherCode", T4.USER_NAME "teacherName", T4.title "teacherTitle",t4.xy_name "teacherXy",t4.zy_name "teacherZy"
                ,(case when pj.COURSE_CODE is not null then 1 else 2 end) isPj
                FROM SYS_DATA_XSXK T1
                LEFT JOIN SYS_DATA_KC T2 ON T2.COURSE_CODE = T1.COURSE_CODE
                LEFT JOIN SYS_DATA_JSRK T3 ON T3.COURSE_CODE = T2.COURSE_CODE
                LEFT JOIN SYS_USER T4 ON T4.USER_ID = T3.USER_ID
                LEFT JOIN (
                    SELECT DISTINCT COURSE_CODE,teacher_code,user_id FROM JXPJ_XSPJ_DFPJ
                ) pj on pj.COURSE_CODE = T1.COURSE_CODE and pj.user_id = T1.USER_ID and pj.teacher_code = T4.USER_ID
                WHERE T1.USER_ID = #{userId}
            </when>
            <when test="accountType == 'teacher'">
                SELECT kc.*
                ,(case when pj.COURSE_CODE is not null then 1 else 2 end) isPj
                FROM SYS_DATA_JSRK rk
                LEFT JOIN SYS_DATA_KC kc on kc.COURSE_CODE = rk.COURSE_CODE
                LEFT JOIN (
                    SELECT DISTINCT COURSE_CODE,TEACHER_CODE FROM JXPJ_XSPJ_DFPJ
                ) pj on pj.COURSE_CODE = rk.COURSE_CODE and pj.TEACHER_CODE = rk.user_id
                where rk.USER_ID = #{userId}
            </when>
            <otherwise>/*若是其他类型的账号访问，则返回所有已评的课程信息*/
                SELECT kc.*
                ,1 as isPj
                FROM (
                    SELECT DISTINCT COURSE_CODE FROM JXPJ_XSPJ_DFPJ
                ) pj LEFT JOIN SYS_DATA_KC kc on kc.COURSE_CODE = pj.COURSE_CODE
            </otherwise>
        </choose>
    </select>

    <insert id="insert">
        insert into JXPJ_XSPJ_DFPJ (CODE, COURSE_CODE, TEACHER_CODE, USER_ID, USER_NAME, CREATE_DATE)
        values (#{code},#{courseCode},#{teacherCode},#{userId},#{userName},CURRENT_DATE)
    </insert>
    <insert id="insertItem">
        insert all
        <foreach collection="paramMap" index="key"  item="val">
            into JXPJ_XSPJ_DFPJ_ITEM (RELATION_CODE, TEMPLATE_CODE, TARGET_CODE, ANSWER)
            VALUES(#{xspj.code},#{xspj.templateCode},#{key,jdbcType=VARCHAR},#{val,jdbcType=VARCHAR})
        </foreach>
        select 1 from dual
    </insert>

    <select id="getPjInfo" resultType="java.util.Map">
        SELECT pj.template_code,pj.TARGET_CODE,target_content,target_score
            ,avg(case when answer = '非常同意' then target_score
            when answer = '比较同意' then target_score*0.8
            when answer = '一般' then target_score*0.6
            when answer = '不太同意' then target_score*0.4
            when answer = '不同意' then target_score*0.2 end) avg_score
        FROM(
            SELECT TT.*,target_content,target_score
            FROM (
                    SELECT * FROM (
                            SELECT ROWNUM rn, TEMPLATE_CODE
                            FROM JXPJ_PJSET_TEMPLATE
                            where TEMPLATE_TYPE = '学生评教' ORDER BY END_DATE desc
                    ) where rn = 1
            ) t
            LEFT JOIN JXPJ_PJSET_TEMPLATE_TARGET tt on TT.TEMPLATE_CODE = t.TEMPLATE_CODE
            LEFT JOIN JXPJ_PJSET_TARGET tg on tg.target_code = tt.target_code
        ) t2 LEFT JOIN (
            SELECT *
            from JXPJ_XSPJ_DFPJ pj LEFT JOIN JXPJ_XSPJ_DFPJ_ITEM it on IT.RELATION_CODE = PJ.CODE
            where course_code = #{courseCode} and TEACHER_CODE = #{userId}
        ) pj on PJ.TEMPLATE_CODE = t2.TEMPLATE_CODE and pj.target_code = t2.target_code
        GROUP BY pj.template_code,pj.TARGET_CODE,target_content,target_score
    </select>
    <select id="getPjInfoSuggestList" resultType="java.lang.String">
        SELECT ANSWER
        from JXPJ_XSPJ_DFPJ pj LEFT JOIN JXPJ_XSPJ_DFPJ_ITEM it on IT.RELATION_CODE = PJ.CODE
        where course_code = #{courseCode} and TEACHER_CODE = #{userId} and TARGET_CODE = 'suggest'
    </select>

    <select id="getPjInfoTransferData" resultType="java.util.Map">
SELECT T2.COURSE_CODE "courseCode", T2.COURSE_NAME "courseName", T4.USER_ID "teacherCode", T4.USER_NAME "teacherName"
FROM SYS_DATA_XSXK T1
LEFT JOIN SYS_DATA_KC T2 ON T2.COURSE_CODE = T1.COURSE_CODE
LEFT JOIN SYS_DATA_JSRK T3 ON T3.COURSE_CODE = T2.COURSE_CODE
LEFT JOIN SYS_DATA_JS T4 ON T4.USER_ID = T3.USER_ID
WHERE T1.USER_ID = #{userId}
    </select>

    <insert id="insertBjpj">
        insert into JXPJ_XSPJ_BJPJ (CODE, TEMPLATE_CODE, PREFER_TEACHER, USER_ID, USER_NAME, CREATE_DATE)
        VALUES (#{code},#{templateCode},#{preferTeacher},#{userId},#{userName},CURRENT_DATE)
    </insert>
    <insert id="insertBjpjTarget">
        insert all
        <foreach collection="mapList" index="idx" item="obj">
            INTO JXPJ_XSPJ_BJPJ_TARGET (RELATION_CODE, COURSE_CODE, TARGET_CODE, SCORE)
            VALUES (#{obj.relationCode},#{obj.courseCode},#{obj.targetCode},#{obj.score})
        </foreach>
        select 1 from dual
    </insert>
    <insert id="insertBjpjSuggest">
        insert into JXPJ_XSPJ_BJPJ_SUGGEST (RELATION_CODE, COURSE_CODE, SUGGEST)
        values (#{relationCode},#{courseCode},NVL(#{suggest}, '无建议或意见') )
    </insert>

    <select id="selectBjpjSuggest" resultType="java.lang.String">
        select SUGGEST
        from JXPJ_XSPJ_BJPJ_SUGGEST
        where RELATION_CODE = #{relationCode} and COURSE_CODE = #{courseCode}
    </select>
    <delete id="deleteBjpjSuggest">
        delete from JXPJ_XSPJ_BJPJ_SUGGEST
        where RELATION_CODE = #{relationCode} and COURSE_CODE = #{courseCode}
    </delete>

    <select id="getBjpjPageList" resultType="com.mycode.jxzlpj.jiaoxuepingjia.xspj.domain.Xspj">
        <choose>
            <when test="accountType == 'teacher'">
                SELECT c.course_code,c.course_name,c.course_attr,c.XF,c.XS,c.ZY_NAME,c.XY_NAME
                ,(case when pj.COURSE_CODE is not null then 1 else 2 end) isPj
                FROM SYS_DATA_JSRK dtc
                LEFT JOIN SYS_DATA_KC c on c.COURSE_CODE = DTC.COURSE_CODE
                LEFT JOIN (
                    SELECT DISTINCT course_code
                    FROM (
                        SELECT TEMPLATE_CODE FROM (
                            SELECT ROWNUM rn, TEMPLATE_CODE
                            FROM JXPJ_PJSET_TEMPLATE
                            where TEMPLATE_TYPE = '学生评教' ORDER BY END_DATE desc
                        ) where rn = 1
                    ) t LEFT JOIN JXPJ_XSPJ_BJPJ t1 on t1.TEMPLATE_CODE = t.TEMPLATE_CODE
                    LEFT JOIN JXPJ_XSPJ_BJPJ_SUGGEST t2 on t2.relation_code = t1.code where t1.code  is not null
                ) pj on pj.COURSE_CODE = c.COURSE_CODE
                where dtc.USER_ID = #{userId}
            </when>
            <otherwise>
                SELECT c.course_code "courseCode",c.course_name "courseName",c.course_attr "courseAttr",c.xf,c.xs,c.ZY_NAME "majorName",c.XY_NAME "collegeName"
                FROM (
                    SELECT DISTINCT course_code
                    FROM (
                        SELECT TEMPLATE_CODE FROM (
                            SELECT ROWNUM rn, TEMPLATE_CODE
                            FROM JXPJ_PJSET_TEMPLATE
                            where TEMPLATE_TYPE = '学生评教' ORDER BY END_DATE desc
                        ) where rn = 1
                    ) t LEFT JOIN JXPJ_XSPJ_BJPJ t1 on t1.TEMPLATE_CODE = t.TEMPLATE_CODE
                    LEFT JOIN JXPJ_XSPJ_BJPJ_SUGGEST t2 on t2.relation_code = t1.code where t1.code  is not null
                ) pj LEFT JOIN SYS_DATA_KC c on c.COURSE_CODE = pj.COURSE_CODE
            </otherwise>
        </choose>

    </select>
    <select id="getBjpjPjInfo" resultType="java.util.Map">
        SELECT pj.template_code,pj.TARGET_CODE,target_content,target_score,avg(score) avg_score
        FROM(
                SELECT TT.*,target_content,target_score
                FROM (
                        SELECT TEMPLATE_CODE FROM (
                                        SELECT ROWNUM rn, TEMPLATE_CODE
                                        FROM JXPJ_PJSET_TEMPLATE
                                        where TEMPLATE_TYPE = '学生评教' ORDER BY END_DATE desc
                        ) where rn = 1
                ) t
                LEFT JOIN JXPJ_PJSET_TEMPLATE_TARGET tt on TT.TEMPLATE_CODE = t.TEMPLATE_CODE
                LEFT JOIN JXPJ_PJSET_TARGET tg on tg.target_code = tt.target_code
        ) t2 LEFT JOIN (
                select template_code,target_code,score
                FROM JXPJ_XSPJ_BJPJ t1
                LEFT JOIN JXPJ_XSPJ_BJPJ_TARGET t2 on t2.relation_code = t1.code
                where course_code = #{courseCode}
        ) pj on PJ.TEMPLATE_CODE = t2.TEMPLATE_CODE and pj.target_code = t2.target_code
        GROUP BY pj.template_code,pj.TARGET_CODE,target_content,target_score
    </select>
    <select id="getBjpjPjInfoSuggestList" resultType="java.lang.String">
        SELECT suggest
        FROM JXPJ_XSPJ_BJPJ t1
        LEFT JOIN JXPJ_XSPJ_BJPJ_SUGGEST t2 on t2.relation_code = t1.code
        where t1.TEMPLATE_CODE = #{templateCode} and t2.COURSE_CODE = #{courseCode}
    </select>
</mapper>